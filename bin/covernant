#!/usr/bin/env python3

import argparse
from covernantlib import ratio
from covernantlib import extract

__author__ = "Konrad Foerstner <konrad@foerstner.org>"
__copyright__ = "2013-2015 by Konrad Foerstner <konrad@foerstner.org>"
__license__ = "ISC license"
__email__ = "konrad@foerstner.org"
__version__ = "0.1dev"

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--version", "-v", default=False, action="store_true",
        help="show version")
    subparsers = parser.add_subparsers(help="commands")

    ratio_plot_parser = subparsers.add_parser(
                "ratio", help="Generate ratio plots of two alignment files.")
    ratio_plot_parser.add_argument("denominator_bam_file")
    ratio_plot_parser.add_argument("numerator_bam_file")
    ratio_plot_parser.add_argument(
        "--output", "-o", dest="output_prefix",
        default="numerator_seq", required=False)
    ratio_plot_parser.add_argument(
        "--window_size", type=int, default=None,
        help="Window size for sliding window average calculation. "
        "Must be an odd number.")
    ratio_plot_parser.add_argument(
        "--step_size", type=int, default=1,
        help="Step size for sliding window average calculation."
        " Default is 1.")
    ratio_plot_parser.set_defaults(func=plot_ratios)
    ratio_plot_parser.add_argument("--factor", type=float, default=None,
                        help="A factor the final ratio is multiplied with.")
    ratio_plot_parser.add_argument(
        "--keep_zero_coverage", default=False, action="store_true",
        help="Also write positions that have a coverage of 0. "
        "Default is to discard those.")
    ratio_plot_parser.add_argument("--denominator_name", default=None)
    ratio_plot_parser.add_argument("--numerator_name", default=None)
    ratio_plot_parser.add_argument("--ratio_name", default=None)

    extract_parser = subparsers.add_parser(
                "extract", help="Extract coverage values from wiggle file.")
    extract_parser.add_argument("coverage_file")
    extract_parser.add_argument("position_file")
    extract_parser.add_argument("--output_prefix", default="output")
    extract_parser.add_argument("--pos_range", type=int)
    
    args = parser.parse_args()
    if args.version is True:
        print("COVERnant version " + __version__)
    elif "func" in dir(args):
        args.func(args)
    else:
        parser.print_help()

def plot_ratios(args):
    ratio.calc_ratio(args)

def extract(args):
    extract.extract(args)
    
main()
